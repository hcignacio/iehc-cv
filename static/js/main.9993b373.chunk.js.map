{"version":3,"sources":["../public/profile.JPG","Components/MainNavbar/MainNavbar.js","Components/MainJumbotron/MainJumbotron.js","Screens/Home/Home.js","Screens/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainNavbar","Navbar","bg","variant","Brand","className","Nav","to","MainJumbotron","Jumbotron","fluid","Container","Row","Col","xs","md","Image","alt","src","profilePicture","style","objectFit","width","height","roundedCircle","Home","Component","Projects","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,qC,iPCK9BC,G,MAAa,WACxB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,UAAU,oBAOtB,kBAACC,EAAA,EAAD,CAAKD,UAAU,cACb,kBAAC,IAAD,CACEE,GAAG,WACHF,UAAU,yDAFZ,QAKA,kBAAC,IAAD,CACEE,GAAG,oBACHF,UAAU,8DAFZ,kB,yFCjBCG,G,MAAgB,WAC3B,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACL,UAAU,QACzB,kBAACM,EAAA,EAAD,CAAWD,OAAK,GACd,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGV,UAAU,kBAC3B,kBAACW,EAAA,EAAD,CACEC,IAAI,kBACJC,IAAKC,IACLC,MAAO,CAAEC,UAAW,QAASC,MAAO,QAASC,OAAQ,SACrDC,eAAa,KAGjB,kBAACX,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGV,UAAU,qBAC3B,wBAAIA,UAAU,SAAd,yBACA,wBAAIA,UAAU,YAAd,oCCjBSoB,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,MACA,0C,GAL0BC,aCDbC,E,uKAEjB,OACE,6BACE,8C,GAJ8BD,aCuBvBE,MAdf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,WAAWC,UAAWN,IACxC,kBAAC,IAAD,CAAOK,KAAK,oBAAoBC,UAAWJ,QCNjCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9993b373.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.265160c7.JPG\";","import React from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport './MainNavbar.css'\r\n\r\nexport const MainNavbar = () => {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand className=\"w-100 row d-flex\">\r\n          {/* <div className=\"col-4\">\r\n            <Link\r\n              to=\"/\">\r\n              <p className=\"mx-4 my-0 badge badge-pill badge-dark\">Ignacio Henin Coldorf</p>\r\n            </Link>\r\n          </div> */}\r\n          <Nav className=\"col-8 ml-5\">\r\n            <Link\r\n              to=\"/iehc-cv\"\r\n              className=\"badge badge-pill badge-dark align-self-center navItem\">\r\n              Home\r\n              </Link>\r\n            <Link\r\n              to=\"/iehc-cv/projects\"\r\n              className=\"badge badge-pill badge-dark align-self-center navItem ml-4\">\r\n              Projects\r\n              </Link>\r\n          </Nav>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Jumbotron, Container, Image, Row, Col } from 'react-bootstrap'\r\nimport profilePicture from 'module../../../public/profile.JPG'\r\nimport './MainJumbotron.css'\r\n\r\nexport const MainJumbotron = () => {\r\n  return (\r\n    <Jumbotron fluid className=\"py-3\">\r\n      <Container fluid>\r\n        <Row>\r\n          <Col xs={6} md={3} className=\"imageContainer\">\r\n            <Image\r\n              alt=\"profile picture\"\r\n              src={profilePicture}\r\n              style={{ objectFit: 'cover', width: '250px', height: '250px' }}\r\n              roundedCircle\r\n            />\r\n          </Col>\r\n          <Col xs={6} md={9} className=\"sideTextContainer\">\r\n            <h1 className=\"title\">Ignacio Henin Coldorf</h1>\r\n            <h3 className=\"subtitle\">\r\n              Developer & Sound Engineer\r\n            </h3>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { MainJumbotron } from '../../Components/MainJumbotron/MainJumbotron'\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MainJumbotron />\r\n        <h1>HOME!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Projects extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>PROJECTS!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import './App.css';\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { MainNavbar } from './Components/MainNavbar/MainNavbar'\nimport Home from \"./Screens/Home/Home\";\nimport Projects from './Screens/Projects/Projects';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <MainNavbar />\n        <Switch>\n          <Route exact path=\"/iehc-cv\" component={Home} />\n          <Route path=\"/iehc-cv/projects\" component={Projects} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}